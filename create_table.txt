from PyQt5.QtWidgets import *
from PyQt5.QtCore import Qt, QSortFilterProxyModel, QAbstractTableModel, QModelIndex, pyqtSignal
from PyQt5.QtGui import *

import pandas as pd


class FilterTableModel(QAbstractTableModel):
    colorChanged = pyqtSignal(int, int, QColor)

    def __init__(self, dataset:pd.DataFrame, readonly):
        super().__init__()
        # populate Headers
        header = dataset.columns.tolist()
        self.horizontalHeaders = ['']*len(header)
        for idx, elm in enumerate(header):
            self.setHeaderData(idx, Qt.Horizontal, data=elm)
        #Initiate data
        self._data = dataset.fillna('').values.tolist()
        self._cell_colors = {}
        self.read_only = readonly

    def data(self, index, role):
        if role == Qt.DisplayRole or role == Qt.EditRole:
            # See below for the nested-list data structure.
            # .row() indexes into the outer list,
            # .column() indexes into the sub-list
            return self._data[index.row()][index.column()]
        elif role == Qt.BackgroundRole:
            return self._cell_colors.get((index.row(), index.column()), None)
        return None

    def setCellColor(self, row, column, color):
        self._cell_colors[(row, column)] = color
        self.colorChanged.emit(row, column, color)

    def rowCount(self, index):
        # The length of the outer list.
        # return len(self._data)
        if self._data == []:
            return 0
        else:
            return len(self._data)

    def columnCount(self, index):
        # The following takes the first sub-list, and returns
        # the length (only works if all rows are an equal length)
        # return len(self._data[0])
        if self._data == []:
            return 0
        else:
            return len(self._data[0])

    def insertRows(self, position, rows, dataset, QModelIndex, parent):
        # self.layoutAboutToBeChanged.emit()
        self.beginInsertRows(QModelIndex, position, position+rows-1)
        # for i in range(rows):
        #     self._data.insert(position, dataset)
        self._data += [dataset]
        self.endInsertRows()
        self.layoutChanged.emit()
        return True

    def setData(self, index, value, role=Qt.EditRole):
        if role in (Qt.DisplayRole, Qt.EditRole):
            self._data[index.row()][index.column()] = value
            self.dataChanged.emit(index, index)
        return True

    def flags(self, index):
        return super().flags(index) | self.read_only

    def setHeaderData(self, section, orientation, data, role=Qt.EditRole):
        if orientation == Qt.Horizontal and role in (Qt.DisplayRole, Qt.EditRole):
            try:
                self.horizontalHeaders[section] = data
                return True
            except:
                return False
        return super().setHeaderData(section, orientation, data, role)

    def headerData(self, section, orientation, role=Qt.DisplayRole):
        if orientation == Qt.Horizontal and role == Qt.DisplayRole:
            try:
                return self.horizontalHeaders[section]
            except:
                pass
        return super().headerData(section, orientation, role)


class TableWidget(QWidget):
    def __init__(self, dataset: pd.DataFrame, table_type:str, readonly=Qt.ItemIsEditable):
        super().__init__()
        self.dataset = dataset
        self.readonly = readonly
        self.table_type = table_type

        if self.table_type == 'static':
            if self.dataset.empty:
                self.table = None
            else:
                self.table = self.create_static_table(self.dataset)
        elif self.table_type == 'filter':
            if self.dataset.empty:
                # self.table, self.proxy_model, self.model = None, None, None
                self.table, self.proxy_model, self.model = self.create_filter_table(self.dataset, self.readonly)
            else:
                self.table, self.proxy_model, self.model = self.create_filter_table(self.dataset, self.readonly)
        else:
            print("Invalid key argument")

    def create_filter_table(self, dataset:pd.DataFrame, readonly=Qt.ItemIsEditable):
        # format all the columns prior to calling this function
        # readonly options: Qt.ItemIsEditable | Qt.DisplayRole
        model = FilterTableModel(dataset, readonly)
        proxy_model = QSortFilterProxyModel()
        proxy_model.setFilterKeyColumn(-1) # Search all columns.
        proxy_model.setSourceModel(model)
        filter_table = QTableView()
        filter_table.setModel(proxy_model)
        return filter_table, proxy_model, model

    def create_static_table(self, dataset):
        #format all the columns prior to calling this function
        _table = QTableWidget(self)
        _table.setColumnCount(dataset.shape[1])
        _table.setHorizontalHeaderLabels(dataset.columns.tolist())
        _table.setRowCount(dataset.shape[0])
        _data = dataset.values.tolist()

        for i in range(len(_data)):
            for j in range(len(_data[i])):
                _table.setItem(i, j, QTableWidgetItem(str(_data[i][j])))
                _table.item(i, j).flags()
        return _table

def copy_filter_table(tbl):
    selected_ranges = tbl.selectionModel().selectedIndexes()
    rows = sorted(set(index.row() for index in selected_ranges))
    cols = sorted(set(index.column() for index in selected_ranges))
    # col_count = _tbl.horizontalHeader().count()
    selected_text = ""

    count = 0
    for i in rows:
        for j in cols:
            selected_text += "{}\t".format(selected_ranges[count].data())
            count += 1
        selected_text = selected_text[:-1]
        selected_text += "\n"
    return selected_text

def copy_static_table(tbl):
    selected_ranges = tbl.selectedRanges()
    selected_items = tbl.selectedItems()

    selected_text = ""
    for selection in selected_ranges:
        # gather header/titles
        for col in range(selection.leftColumn(), selection.rightColumn() + 1):
            header_title = tbl.horizontalHeaderItem(col)
            if header_title is not None:
                selected_text += "{}\t".format(header_title.text())
        selected_text = selected_text[:-1]
        selected_text += "\n"

        # gather data
        for row in range(selection.topRow(), selection.bottomRow() + 1):
            for col in range(selection.leftColumn(), selection.rightColumn() + 1):
                item = tbl.item(row, col)
                if item is not None and item in selected_items:
                    selected_text += "{}\t".format(item.text())
                # else:
                #     selected_text += "\t"
            selected_text = selected_text[:-1]
            selected_text += "\n"
    return selected_text